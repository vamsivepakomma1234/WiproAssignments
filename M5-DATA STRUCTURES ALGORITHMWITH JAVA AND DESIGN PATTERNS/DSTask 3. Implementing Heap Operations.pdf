Task 3: Implementing Heap Operations
Code a min-heap in C# with methods for insertion, deletion, and fetching the minimum element. Ensure that the heap property is maintained after each operation."
Solution:

public class MinHeap
{
    private int[] heap;
    private int size;
    private int capacity;

    public MinHeap(int capacity)
    {
        this.capacity = capacity;
        this.size = 0;
        heap = new int[capacity + 1];
    }

    private int Parent(int i) => i / 2;
    private int LeftChild(int i) => 2 * i;
    private int RightChild(int i) => 2 * i + 1;

    private void Swap(int i, int j)
    {
        int temp = heap[i];
        heap[i] = heap[j];
        heap[j] = temp;
    }

    private void HeapifyUp(int index)
    {
        while (index > 1 && heap[Parent(index)] > heap[index])
        {
            Swap(index, Parent(index));
            index = Parent(index);
        }
    }

    private void HeapifyDown(int index)
    {
        int minIndex = index;
        int left = LeftChild(index);
        int right = RightChild(index);

        if (left <= size && heap[left] < heap[minIndex])
            minIndex = left;

        if (right <= size && heap[right] < heap[minIndex])
            minIndex = right;

        if (index != minIndex)
        {
            Swap(index, minIndex);
            HeapifyDown(minIndex);
        }
    }

    public void Insert(int value)
    {
        if (size == capacity)
        {
            Console.WriteLine("Heap is full. Cannot insert more elements.");
            return;
        }

        size++;
        heap[size] = value;
        HeapifyUp(size);
    }

    public int ExtractMin()
    {
        if (size == 0)
        {
            Console.WriteLine("Heap is empty.");
            return -1;
        }

        int min = heap[1];
        heap[1] = heap[size];
        size--;
        HeapifyDown(1);
        return min;
    }

    public int GetMin()
    {
        if (size == 0)
        {
            Console.WriteLine("Heap is empty.");
            return -1;
        }
        return heap[1];
    }

    public static void Main(string[] args)
    {
        MinHeap minHeap = new MinHeap(10);

        minHeap.Insert(5);
        minHeap.Insert(3);
        minHeap.Insert(8);
        minHeap.Insert(1);
        minHeap.Insert(9);

        Console.WriteLine("Minimum element: " + minHeap.GetMin()); // Output: Minimum element: 1

        minHeap.ExtractMin();
        Console.WriteLine("Minimum element after deletion: " + minHeap.GetMin()); // Output: Minimum element after deletion: 3
    }
}
