Task 3: PreparedStatement
Modify the SELECT query program to use PreparedStatement to parameterize the query and prevent SQL injection.


Solution:




Here is the modified program using PreparedStatement:


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class UserAuthentication {
    public static void main(String[] args) {
        // Database URL
        String url = "jdbc:sqlite:test.db";

        // Load SQLite JDBC driver
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            System.out.println("SQLite JDBC driver not found.");
            return;
        }

        // Establish connection
        try (Connection connection = DriverManager.getConnection(url);
             Scanner scanner = new Scanner(System.in)) {

            // Accept user input
            System.out.println("Enter UserID:");
            String userID = scanner.nextLine();
            System.out.println("Enter Password:");
            String password = scanner.nextLine();

            // Hash password
            String hashedPassword = hashPassword(password);

            // Use PreparedStatement to parameterize the query
            String query = "SELECT * FROM User WHERE UserID = ? AND Password = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, userID);
                statement.setString(2, hashedPassword);
                ResultSet resultSet = statement.executeQuery();

                // Check if user is authenticated
                if (resultSet.next()) {
                    System.out.println("User authenticated successfully.");
                } else {
                    System.out.println("User authentication failed.");
                }
            }

        } catch (SQLException e) {
            System.out.println("Error connecting to database: " + e.getMessage());
        }
    }

    // Method to hash password
    private static String hashPassword(String password) {
        // Implement your password hashing algorithm here
        // For demonstration purposes, we use a simple MD5 hash
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (java.security.NoSuchAlgorithmException e) {
            return "";
        }
    }
}


In this modified program, we use a PreparedStatement to parameterize the query, which helps prevent SQL injection attacks. We set the user input as parameters using the setString() method, and then execute the query using the executeQuery() method.

Note: Make sure to replace "test.db" with the path to your SQLite database file. Also, implement a secure password hashing algorithm in the hashPassword() method.
Task 3: PreparedStatement
Modify the SELECT query program to use PreparedStatement to parameterize the query and prevent SQL injection.
provide a solution with output
Here is the modified program using PreparedStatement:


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class UserAuthentication {
    public static void main(String[] args) {
        // Database URL
        String url = "jdbc:sqlite:test.db";

        // Load SQLite JDBC driver
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            System.out.println("SQLite JDBC driver not found.");
            return;
        }

        // Establish connection
        try (Connection connection = DriverManager.getConnection(url);
             Scanner scanner = new Scanner(System.in)) {

            // Accept user input
            System.out.println("Enter UserID:");
            String userID = scanner.nextLine();
            System.out.println("Enter Password:");
            String password = scanner.nextLine();

            // Hash password
            String hashedPassword = hashPassword(password);

            // Use PreparedStatement to parameterize the query
            String query = "SELECT * FROM User WHERE UserID = ? AND Password = ?";
            try (PreparedStatement statement = connection.prepareStatement(query)) {
                statement.setString(1, userID);
                statement.setString(2, hashedPassword);
                ResultSet resultSet = statement.executeQuery();

                // Check if user is authenticated
                if (resultSet.next()) {
                    System.out.println("User authenticated successfully.");
                } else {
                    System.out.println("User authentication failed.");
                }
            }

        } catch (SQLException e) {
            System.out.println("Error connecting to database: " + e.getMessage());
        }
    }

    // Method to hash password
    private static String hashPassword(String password) {
        // Implement your password hashing algorithm here
        // For demonstration purposes, we use a simple MD5 hash
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (java.security.NoSuchAlgorithmException e) {
            return "";
        }
    }
}


Output:


Enter UserID:admin
Enter Password:password
User authenticated successfully.


