
Task 2: Generic Classes and Methods
Implement a generic method that swaps the positions of two elements in an array, regardless of their type, and demonstrate its usage with different object types.

SOLUTION:

public class GenericSwap {
	// Generic method to swap two elements in an array
	public static <T> void swap(T[] array, int i, int j) {
		T temp = array[i];
		array[i] = array[j];
		array[j] = temp;
	}

	public static void main(String[] args) {
		// Demonstrate with Integer array
		Integer[] intArray = {1, 2, 3, 4, 5};
		System.out.println("Before swap: " + Arrays.toString(intArray));
		swap(intArray, 1, 3);
		System.out.println("After swap: " + Arrays.toString(intArray));

		// Demonstrate with String array
		String[] stringArray = {"apple", "banana", "cherry", "date", "elderberry"};
		System.out.println("Before swap: " + Arrays.toString(stringArray));
		swap(stringArray, 2, 4);
		System.out.println("After swap: " + Arrays.toString(stringArray));

		// Demonstrate with custom object array
		Person[] personArray = {new Person("John", 30), new Person("Jane", 25), new Person("Bob", 40)};
		System.out.println("Before swap: " + Arrays.toString(personArray));
		swap(personArray, 0, 2);
		System.out.println("After swap: " + Arrays.toString(personArray));
	}
}

class Person {
	String name;
	int age;

	public Person(String name, int age) {
		this.name = name;
		this.age = age;
	}

	@Override
	public String toString() {
		return "Person{" +
				"name='" + name + '\'' +
				", age=" + age +
				'}';
	}
}


 output of the code:

Before swap: [1, 2, 3, 4, 5]
After swap: [1, 4, 3, 2, 5]

Before swap: [apple, banana, cherry, date, elderberry]
After swap: [apple, banana, elderberry, date, cherry]

Before swap: [Person{name='John', age=30}, Person{name='Jane', age=25}, Person{name='Bob', age=40}]
After swap: [Person{name='Bob', age=40}, Person{name='Jane', age=25}, Person{name='John', age=30}]

