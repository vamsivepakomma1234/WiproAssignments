Task 1: Knapsack Problem
Write a function int Knapsack(int W, int[] weights, int[] values) in C# that determines the maximum value of items that can fit into a knapsack with a capacity W. The function should handle up to 100 items. Find the optimal way to fill the knapsack with the given items to achieve the maximum total value. You must consider that you cannot break items, but have to include them whole.

Solution:


public class Knapsack {
    public static void main(String[] args) {
        int W = 50; // knapsack capacity
        int[] weights = {10, 20, 30};
        int[] values = {60, 100, 120};

        int maxVal = knapsack(W, weights, values);
        System.out.println("Maximum value: " + maxVal);
    }

    public static int knapsack(int W, int[] weights, int[] values) {
        int n = weights.length;
        int[][] dp = new int[n + 1][W + 1];

        // Build the dp table
        for (int i = 1; i <= n; i++) {
            for (int w = 1; w <= W; w++) {
                if (weights[i - 1] > w) {
                    dp[i][w] = dp[i - 1][w];
                } else {
                    dp[i][w] = Math.max(dp[i - 1][w], values[i - 1] + dp[i - 1][w - weights[i - 1]]);
                }
            }
        }

        return dp[n][W];
    }
}


Output:

Maximum value: 220


