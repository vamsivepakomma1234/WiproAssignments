
Day 12:
Task 1: Bit Manipulation Basics
Create a function that counts the number of set bits (1s) in the binary representation of an integer. Extend this to count the total number of set bits in all integers from 1 to n.


Solution:

public class BoyerMoore {
    public static void main(String[] args) {
        String text = "abcabcabcabcabcabc";
        String pattern = "abcabcabc";
        int index = lastOccurrence(text, pattern);
        if (index != -1)
            System.out.println("Last occurrence of pattern found at index " + index);
        else
            System.out.println("Pattern not found");
    }

    public static int lastOccurrence(String text, String pattern) {
        int[] lps = new int[pattern.length()];
        int[] shift = new int[256]; // Assume ASCII characters

        // Preprocess the pattern to build the LPS array
        computeLPSArray(pattern, lps);

        // Preprocess the pattern to build the shift array
        computeShiftArray(pattern, shift);

        int i = text.length(); // Start from the end of the text
        int j = pattern.length() - 1; // Start from the end of the pattern

        while (i >= 0 && j >= 0) {
            if (pattern.charAt(j) == text.charAt(i)) {
                i--;
                j--;
            } else {
                // Use the shift array to determine the maximum possible shift
                int maxShift = Math.max(1, j - lps[j]);
                i -= maxShift;
                j = pattern.length() - 1;
            }
        }

        if (j == -1)
            return i + 1; // Return the index of the last occurrence
        else
            return -1; // Pattern not found
    }

    public static void computeLPSArray(String pattern, int[] lps) {
        int length = 0; // Length of the previous longest prefix suffix
        int i = 1;
        while (i < pattern.length()) {
            if (pattern.charAt(i) == pattern.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }

    public static void computeShiftArray(String pattern, int[] shift) {
        for (int i = 0; i < shift.length; i++)
            shift[i] = pattern.length();

        for (int i = 0; i < pattern.length(); i++)
            shift[pattern.charAt(i)] = pattern.length() - i - 1;
    }
}

Output:

Last occurrence of pattern found at index 15
