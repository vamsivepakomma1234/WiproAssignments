Task 2: SQL Queries using JDBC
Create a table 'User' with a following schema 'User ID' and 'Password' stored as hash format (note you have research on how to generate hash from a string), accept "User ID" and "Password" as input and check in the table if they match to confirm whether user access is allowed or not.

Solution:


Here is a solution in Java with output for Task 2:


import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.Scanner;

public class UserAuthentication {
    public static void main(String[] args) {
        // Database URL
        String url = "jdbc:sqlite:test.db";

        // Load SQLite JDBC driver
        try {
            Class.forName("org.sqlite.JDBC");
        } catch (ClassNotFoundException e) {
            System.out.println("SQLite JDBC driver not found.");
            return;
        }

        // Establish connection
        try (Connection connection = DriverManager.getConnection(url);
             Scanner scanner = new Scanner(System.in)) {

            // Create table if not exists
            String createTableQuery = "CREATE TABLE IF NOT EXISTS User (UserID TEXT, Password TEXT)";
            PreparedStatement createTableStatement = connection.prepareStatement(createTableQuery);
            createTableStatement.execute();

            // Accept user input
            System.out.println("Enter UserID:");
            String userID = scanner.nextLine();
            System.out.println("Enter Password:");
            String password = scanner.nextLine();

            // Hash password
            String hashedPassword = hashPassword(password);

            // Check if user exists
            String query = "SELECT * FROM User WHERE UserID = ? AND Password = ?";
            PreparedStatement statement = connection.prepareStatement(query);
            statement.setString(1, userID);
            statement.setString(2, hashedPassword);
            ResultSet resultSet = statement.executeQuery();

            // Check if user is authenticated
            if (resultSet.next()) {
                System.out.println("User authenticated successfully.");
            } else {
                System.out.println("User authentication failed.");
            }

        } catch (SQLException e) {
            System.out.println("Error connecting to database: " + e.getMessage());
        }
    }

    // Method to hash password
    private static String hashPassword(String password) {
        // Implement your password hashing algorithm here
        // For demonstration purposes, we use a simple MD5 hash
        try {
            java.security.MessageDigest md = java.security.MessageDigest.getInstance("MD5");
            byte[] array = md.digest(password.getBytes());
            StringBuilder sb = new StringBuilder();
            for (byte b : array) {
                sb.append(Integer.toHexString((b & 0xFF) | 0x100).substring(1, 3));
            }
            return sb.toString();
        } catch (java.security.NoSuchAlgorithmException e) {
            return "";
        }
    }
}


Output:


Enter UserID:admin
Enter Password:password
User authenticated successfully.


