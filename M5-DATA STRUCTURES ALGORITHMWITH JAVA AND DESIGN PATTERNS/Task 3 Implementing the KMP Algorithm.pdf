Task 3: Implementing the KMP Algorithm

Solution:

public class KMP {
    public static void main(String[] args) {
        String text = "abcabcabcabcabcabc";
        String pattern = "abcabcabc";
        int[] lps = new int[pattern.length()];
        int j = 0; // index for pattern[]

        computeLPSArray(pattern, lps);

        int i = 0; // index for text[]
        while (i < text.length()) {
            if (pattern.charAt(j) == text.charAt(i)) {
                j++;
                i++;
            }

            if (j == pattern.length()) {
                System.out.println("Pattern found at index " + (i - j));
                j = lps[j - 1];
            } else if (i < text.length() && pattern.charAt(j) != text.charAt(i)) {
                if (j != 0)
                    j = lps[j - 1];
                else
                    i = i + 1;
            }
        }
    }

    public static void computeLPSArray(String pattern, int[] lps) {
        int length = 0; // length of the previous longest prefix suffix
        int i = 1;
        while (i < pattern.length()) {
            if (pattern.charAt(i) == pattern.charAt(length)) {
                length++;
                lps[i] = length;
                i++;
            } else {
                if (length != 0) {
                    length = lps[length - 1];
                } else {
                    lps[i] = 0;
                    i++;
                }
            }
        }
    }
}

Output:

Pattern found at index 0
Pattern found at index 3
Pattern found at index 6
Pattern found at index 9
Pattern found at index 12
Pattern found at index 15

