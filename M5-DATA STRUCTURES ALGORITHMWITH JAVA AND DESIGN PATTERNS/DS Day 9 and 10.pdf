Day 9 and 10:
Task 1: Dijkstra’s Shortest Path Finder
Code Dijkstra’s algorithm to find the shortest path from a start node to every other node in a weighted graph with positive weights.
Here's a Java implementation of Dijkstra's algorithm to find the shortest path from a start node to every other node in a weighted graph with positive weights:


import java.util.*;

public class DijkstraShortestPath {
    static class Edge {
        int destination;
        int weight;

        public Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }

    public static int[] dijkstra(List<List<Edge>> graph, int start) {
        int n = graph.size();
        int[] distance = new int[n];
        Arrays.fill(distance, Integer.MAX_VALUE);
        distance[start] = 0;

        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> distance[a] - distance[b]);
        pq.offer(start);

        while (!pq.isEmpty()) {
            int current = pq.poll();

            for (Edge neighbor : graph.get(current)) {
                int newDistance = distance[current] + neighbor.weight;
                if (newDistance < distance[neighbor.destination]) {
                    distance[neighbor.destination] = newDistance;
                    pq.offer(neighbor.destination);
                }
            }
        }

        return distance;
    }

    public static void main(String[] args) {
        int n = 5; // Number of nodes
        List<List<Edge>> graph = new ArrayList<>(n);

        // Initialize adjacency lists
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        // Add edges (node, weight)
        addEdge(graph, 0, 1, 10);
        addEdge(graph, 0, 3, 5);
        addEdge(graph, 1, 2, 1);
        addEdge(graph, 1, 3, 2);
        addEdge(graph, 2, 4, 4);
        addEdge(graph, 3, 1, 3);
        addEdge(graph, 3, 2, 9);
        addEdge(graph, 3, 4, 2);
        addEdge(graph, 4, 0, 7);
        addEdge(graph, 4, 2, 6);

        int startNode = 0;
        int[] shortestDistances = dijkstra(graph, startNode);

        System.out.println("Shortest distances from node " + startNode + " to every other node:");
        for (int i = 0; i < shortestDistances.length; i++) {
            System.out.println("Node " + i + ": " + shortestDistances[i]);
        }
    }

    // Utility method to add an edge
    private static void addEdge(List<List<Edge>> graph, int source, int destination, int weight) {
        graph.get(source).add(new Edge(destination, weight));
    }
}


Output:

Shortest distances from node 0 to every other node:
Node 0: 0
Node 1: 8
Node 2: 9
Node 3: 5
Node 4: 7
