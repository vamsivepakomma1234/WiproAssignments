
Task 2: Kruskal’s Algorithm for MST
Implement Kruskal’s algorithm to find the minimum spanning tree of a given connected, undirected graph with non-negative edge weights.


Solution:


import java.util.*;

public class KruskalMinimumSpanningTree {
    static class Edge implements Comparable<Edge> {
        int source;
        int destination;
        int weight;

        public Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge other) {
            return this.weight - other.weight;
        }
    }

    static class DisjointSet {
        int[] parent;
        int[] rank;

        public DisjointSet(int size) {
            parent = new int[size];
            rank = new int[size];
            for (int i = 0; i < size; i++) {
                parent[i] = i;
            }
        }

        public int find(int x) {
            if (parent[x] != x) {
                parent[x] = find(parent[x]);
            }
            return parent[x];
        }

        public void union(int x, int y) {
            int rootX = find(x);
            int rootY = find(y);

            if (rootX == rootY) {
                return;
            }

            if (rank[rootX] < rank[rootY]) {
                parent[rootX] = rootY;
            } else if (rank[rootX] > rank[rootY]) {
                parent[rootY] = rootX;
            } else {
                parent[rootY] = rootX;
                rank[rootX]++;
            }
        }
    }

    public static List<Edge> kruskal(List<Edge> edges, int numVertices) {
        // Sort edges by weight
        Collections.sort(edges);

        List<Edge> minimumSpanningTree = new ArrayList<>();
        DisjointSet disjointSet = new DisjointSet(numVertices);

        for (Edge edge : edges) {
            int sourceParent = disjointSet.find(edge.source);
            int destinationParent = disjointSet.find(edge.destination);

            // Check if adding the edge creates a cycle
            if (sourceParent != destinationParent) {
                minimumSpanningTree.add(edge);
                disjointSet.union(sourceParent, destinationParent);
            }
        }

        return minimumSpanningTree;
    }

    public static void main(String[] args) {
        // Example graph represented as a list of edges (source, destination, weight)
        List<Edge> edges = new ArrayList<>();
        edges.add(new Edge(0, 1, 10));
        edges.add(new Edge(0, 2, 6));
        edges.add(new Edge(0, 3, 5));
        edges.add(new Edge(1, 3, 15));
        edges.add(new Edge(2, 3, 4));

        int numVertices = 4; // Number of vertices

        // Find minimum spanning tree using Kruskal's algorithm
        List<Edge> minimumSpanningTree = kruskal(edges, numVertices);

        // Print minimum spanning tree edges
        System.out.println("Minimum Spanning Tree Edges:");
        for (Edge edge : minimumSpanningTree) {
            System.out.println(edge.source + " - " + edge.destination + " : " + edge.weight);
        }
    }
}


Output:

Minimum Spanning Tree Edges:
2 - 3 : 4
0 - 3 : 5
0 - 1 : 10

