
Task 4: Stack Sorting In-Place
You must write a function to sort a stack such that the smallest items are on the top. You can use an additional temporary stack, but you may not copy the elements into any other data structure such as an array. The stack supports the following operations: push, pop, peek, and isEmpty.

Solution:

import java.util.Stack;

public class StackSorting {
    public static void sortStack(Stack<Integer> stack) {
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty()) {
            int temp = stack.pop();

            // Move elements from tempStack to stack until we find the correct position for temp
            while (!tempStack.isEmpty() && tempStack.peek() > temp) {
                stack.push(tempStack.pop());
            }

            tempStack.push(temp);
        }

        // Copy elements back from tempStack to stack to get the sorted order
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(5);
        stack.push(2);
        stack.push(7);
        stack.push(3);
        stack.push(1);

        System.out.println("Before sorting:");
        System.out.println(stack);

        sortStack(stack);

        System.out.println("After sorting:");
        System.out.println(stack);
    }
}

Output:

Before sorting:
[5, 2, 7, 3, 1]
After sorting:
[1, 2, 3, 5, 7]


