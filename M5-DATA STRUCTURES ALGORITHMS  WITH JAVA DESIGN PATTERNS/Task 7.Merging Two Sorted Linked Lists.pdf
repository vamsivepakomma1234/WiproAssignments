Task 7: Merging Two Sorted Linked Lists

You are provided with the heads of two sorted linked lists. The lists are sorted in ascending order. Create a merged linked list in ascending order from the two input lists without using any extra space (i.e., do not create any new nodes).

Solution:

class ListNode {
    int val;
    ListNode next;

    ListNode(int x) {
        val = x;
        next = null;
    }
}

public class MergeSortedLists {
    public ListNode mergeTwoLists(ListNode l1, ListNode l2) {
        // Handle edge cases
        if (l1 == null) {
            return l2;
        }
        if (l2 == null) {
            return l1;
        }

        // Determine the head of the merged list
        ListNode head = (l1.val < l2.val) ? l1 : l2;

        // Merge the lists
        ListNode prev = null;
        while (l1 != null && l2 != null) {
            if (l1.val < l2.val) {
                if (prev != null) {
                    prev.next = l1;
                }
                prev = l1;
                l1 = l1.next;
            } else {
                if (prev != null) {
                    prev.next = l2;
                }
                prev = l2;
                l2 = l2.next;
            }
        }

        // Attach the remaining nodes
        if (l1 != null) {
            prev.next = l1;
        }
        if (l2 != null) {
            prev.next = l2;
        }

        return head;
    }

    // Utility method to print the merged list
    public void printList(ListNode head) {
        ListNode current = head;
        while (current != null) {
            System.out.print(current.val + " ");
            current = current.next;
        }
        System.out.println();
    }

    public static void main(String[] args) {
        MergeSortedLists solution = new MergeSortedLists();

        // Create two sorted linked lists
        ListNode l1 = new ListNode(1);
        l1.next = new ListNode(3);
        l1.next.next = new ListNode(5);

        ListNode l2 = new ListNode(2);
        l2.next = new ListNode(4);
        l2.next.next = new ListNode(6);

        System.out.println("List 1:");
        solution.printList(l1);
        System.out.println("List 2:");
        solution.printList(l2);

        // Merge the lists
        ListNode merged = solution.mergeTwoLists(l1, l2);

        System.out.println("Merged List:");
        solution.printList(merged);
    }
}


Output:
List 1:
1 3 5 
List 2:
2 4 6 
Merged List:
1 2 3 4 5 6