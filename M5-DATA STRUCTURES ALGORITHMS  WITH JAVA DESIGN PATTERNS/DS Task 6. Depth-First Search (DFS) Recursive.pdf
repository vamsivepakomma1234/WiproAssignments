Task 6: Depth-First Search (DFS) Recursive
Write a recursive DFS function for a given undirected graph. The function should visit every node and print it out.

import java.util.*;

public class DFSRecursive {
    private static void dfs(List<List<Integer>> graph, int start, Set<Integer> visited) {
        visited.add(start);
        System.out.print(start + " ");

        for (int neighbor : graph.get(start)) {
            if (!visited.contains(neighbor)) {
                dfs(graph, neighbor, visited);
            }
        }
    }

    public static void main(String[] args) {
        // Example undirected graph represented using adjacency lists
        List<List<Integer>> graph = new ArrayList<>();
        int n = 6; // Number of nodes

        // Initialize adjacency lists
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        // Add edges
        addEdge(graph, 0, 1);
        addEdge(graph, 0, 2);
        addEdge(graph, 1, 3);
        addEdge(graph, 2, 4);
        addEdge(graph, 2, 5);

        // Set to keep track of visited nodes
        Set<Integer> visited = new HashSet<>();

        // Start DFS from node 0
        System.out.println("DFS traversal starting from node 0:");
        dfs(graph, 0, visited);
    }

    // Utility method to add an undirected edge
    private static void addEdge(List<List<Integer>> graph, int u, int v) {
        graph.get(u).add(v);
        graph.get(v).add(u);
    }
}


Output:

DFS traversal starting from node 0:
0 1 3 2 4 5 
