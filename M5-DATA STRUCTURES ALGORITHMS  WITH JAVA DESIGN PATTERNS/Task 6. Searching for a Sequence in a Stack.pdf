Task 6: Searching for a Sequence in a Stack
Given a stack and a smaller array representing a sequence, write a function that determines if the sequence is present in the stack. Consider the sequence present if, upon popping the elements, all elements of the array appear consecutively in the stack.

Solution:


import java.util.Stack;

public class SequenceInStack {
    public static boolean isSequencePresent(Stack<Integer> stack, int[] sequence) {
        if (stack.isEmpty() || sequence.length == 0) {
            return false;
        }

        int sequenceIndex = 0;
        Stack<Integer> tempStack = new Stack<>();

        while (!stack.isEmpty() && sequenceIndex < sequence.length) {
            int current = stack.pop();
            tempStack.push(current);

            if (current == sequence[sequenceIndex]) {
                sequenceIndex++;
            }
        }

        // Restore the original stack
        while (!tempStack.isEmpty()) {
            stack.push(tempStack.pop());
        }

        // If all elements of the sequence were found consecutively, return true
        return sequenceIndex == sequence.length;
    }

    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();
        stack.push(4);
        stack.push(3);
        stack.push(2);
        stack.push(1);

        int[] sequence1 = {1, 2}; // Present
        int[] sequence2 = {2, 3, 4}; // Present
        int[] sequence3 = {1, 3}; // Not present

        System.out.println("Sequence 1 present: " + isSequencePresent(stack, sequence1));
        System.out.println("Sequence 2 present: " + isSequencePresent(stack, sequence2));
        System.out.println("Sequence 3 present: " + isSequencePresent(stack, sequence3));
    }
}



Output:

Sequence 1 present: true
Sequence 2 present: true
Sequence 3 present: false
