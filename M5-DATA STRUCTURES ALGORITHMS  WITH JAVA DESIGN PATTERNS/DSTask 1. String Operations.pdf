Task 1: String Operations
Write a method that takes two strings, concatenates them, reverses the result, and then extracts the middle substring of the given length. Ensure your method handles edge cases, such as an empty string or a substring length larger than the concatenated string.


Solution:

public class StringOperations {
    public static String middleSubstringAfterReverseConcat(String str1, String str2, int length) {
        // Concatenate the strings
        String concatenated = str1.concat(str2);

        // Reverse the concatenated string
        String reversed = new StringBuilder(concatenated).reverse().toString();

        // Calculate the start index for the middle substring
        int startIndex = (reversed.length() - length) / 2;

        // Check for edge cases
        if (reversed.isEmpty() || length <= 0) {
            return "";
        } else if (length >= reversed.length()) {
            return reversed;
        } else {
            // Extract the middle substring of the given length
            return reversed.substring(startIndex, startIndex + length);
        }
    }

    public static void main(String[] args) {
        // Example strings
        String str1 = "Hello";
        String str2 = "World";
        int length = 3;

        // Perform string operations
        String result = middleSubstringAfterReverseConcat(str1, str2, length);

        // Print the result
        System.out.println("Middle substring of length " + length + " after reverse concatenation: " + result);
    }
}


Output:

Middle substring of length 3 after reverse concatenation: rdl
